// password = hlfE9iW2cbp8bwfl

//! to enter mongo shell type command "mongosh" on cmd ==> this will connect you to local db.

//!=== 1) TO SHOW ALL THE DATABASES
// ==> show databases/ show dbs

//!=== 2) TO CREATE A DATABASE and TO SWITCH TO EXISTING DATABASE ====================
// ==> use database-name
// example : use school
//! "use" keyword has two functions ==> it creates a new database if it is not present, if present it simply switches the database

// cannot pass undefined, functions and date, in  to overcome this MONGODB uses BSON datatypes

//! BSON stands for binary JSON
//! it stores data in binary format
//! undefined, functions , dates datatypes are used in BSON

//! BSON ==> ObjectID, numbers, strings, booleans, null, arrays, objects

//!=== 3) TO CREATE A COLLECTION =====================
// db.createCollection("collection-name")
// example ==> db.createCollection("teachers")

//! === 4) TO DISPLAY ALL THE COLLECTIONS ====================
// show collections (use this command)
// show tables

//! === 5) TO DELETE A COLLECTION ====================
// db.collection-name.drop()
// example ==> db.students.drop()

//! === 6) TO DELETE A DATABASE ====================
// before deleting a database, switch to that database
// db.dropDatabase()

//!=================== INSERTING DATA IN A COLLECTION =======================
//! two ways to insert data ==>

//!=== 7a) Inserting one document at a time
// db.collection-name.insertOne({})
// example ==> db.students.insertOne({name:"abc", age:12})
/*  output ==> {
  acknowledged: true, // no syntactical error
  insertedId: ObjectId('6752b4c0ca55246010c73bf8') //! this is ObjectID generated by MOngoDB automatically
}
 */

/*
    ! if we are not providing _id field while inserting data,MongoDB will automatically generate ObjectID which will be of BSON datatype
    example ==> db.students.insertOne({name:"abc", age:12}) 
    output ==> {name:
        _id:ObjectID("6752b4c0ca55246010c73bf8"), // datatype ==> ObjectID which is BSON type
        name:"abc",
        age:12,
        } 
    ! if we are providing _id field, then the datatype of _id will be of whatever user has given input
    example ==> db.students.insertOne({"abc", age:12, _id:123}) // datatype ==> Number
            ==> db.students.insertOne({name:"abc", age:12, _id:"123"}) // datatype ==> String

    !! all documents must have _id field even if we are passing empty document
 */

//!=== 7b) Inserting multiple documents at a time
// db.collection-name.insertMany( [ {}, {}, {}, ........ ] ) //! array of documents
/* example ==> db.teachers.insertMany([
        {name:"abc", age:12},
        {name:"def", phone:1234567890},
        {email:"abc@123", address:"pune"}
    ]) */

db.teachers.insertMany([
  { name: "abc", age: 67 },
  { name: "def", phone: 1234567890 },
  { email: "12@gmail.com" },
]);

//!=================== FETCHING DATA FROM A COLLECTION =======================

/*
    ! find/findOne( {filter}, {projection}, {options} )
 */

//! two ways

//! === 8a) fetching multiple documents
// db.collection-name.find()
// ?example  ==>
db.students.find(); // fetches all the documents in the collection

//? find all the documents whose name is "ishika" // case sensitive
db.students.find({ name: "ishika" }, { age: 1 });

//! === 8a) fetching single document
// db.collection-name.findOne() // fetches the top most document
// ?example  ==>
db.students.findOne();

//!=================== DELETING DOCUMENT FROM A COLLECTION =======================
/*
    deleteOne/deleteMany( {filter} )
 */

//! === 9a) deleting a single document
// db.collection-name.deleteOne({})
//? example ==>
db.students.deleteOne({}); // the top most document will be deleted

//! === 9a) deleting multiple documents
// db.collection-name.deleteMany({})
//? example ==>
db.students.deleteMany({}); // all the documents will be deleted

//!=================== UPDATING DOCUMENT =======================

//!10) two methods to update ==> updateOne()/updateMany()
/*
    updateOne/ updateMany({filter}, {updation value}, {options})
    ! filter ==> it targets the documents to be updated
    ! updation value ==> 1) we can update existing fields , 2) we can create new fields
    ! options ==> upsert : //TODO
 */

// ! 11) to show current working database
// ==> db

//! github.com/utk-281
